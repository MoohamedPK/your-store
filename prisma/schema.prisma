generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        String         @id @default(cuid())
  name      String
  email     String         @unique
  password  String
  image     String?
  phone     String?
  adress    String?
  role      UserRole       @default(USER)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  orders    OrderProduct[]
  Cart      Cart?
}

model Product {
  id          String         @id @default(cuid())
  name        String
  description String
  price       Decimal
  image       String // store Cloudinary URL here
  sortOrder   Int
  sizes       Size[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  Category    Category       @relation(fields: [categoryId], references: [id])
  categoryId  String
  stock       Int            @default(0)
  orders      OrderProduct[]
  CartItem    CartItem[]
}

model Order {
  id            String         @id @default(cuid())
  paid          Boolean
  subtotalPrice Float
  deliveryFee   Float
  totalPrice    Float
  userEmail     String
  phone         String
  streetAddress String
  city          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  products      OrderProduct[]
}

model OrderProduct {
  id        String  @id @default(cuid())
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  User      User?   @relation(fields: [userId], references: [id]) // optional in the case of the user is a guest
  userId    String?
  Product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Category {
  id       String    @id @default(cuid())
  name     String
  products Product[]
}

model Size {
  id        String       @id @default(cuid())
  name      ProductSizes
  price     Float
  product   Product      @relation(fields: [productId], references: [id])
  productId String

  @@unique([name, productId])
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String       @id @default(cuid())
  product   Product      @relation(fields: [productId], references: [id])
  productId String
  cart      Cart?        @relation(fields: [cartId], references: [id])
  cartId    String
  quantity  Int          @default(1)
  size      ProductSizes
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

enum ProductSizes {
  SMALL
  MEDIUM
  LARGE
}
